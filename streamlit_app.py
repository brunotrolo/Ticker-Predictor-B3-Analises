
import streamlit as st
import pandas as pd, numpy as np
from datetime import date, timedelta
import yfinance as yf
import plotly.graph_objects as go
from b3_utils import load_b3_tickers, ensure_sa_suffix, is_known_b3_ticker, search_b3

st.set_page_config(page_title="An√°lise B3 Did√°tica", page_icon="üìä", layout="wide")

@st.cache_data(ttl=3600)
def fetch_data(ticker, start, end):
    df = yf.download(ensure_sa_suffix(ticker), start=start, end=end, auto_adjust=True, progress=False)
    if df.empty: return df
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(0)
    for c in ["Open","High","Low","Close","Volume"]:
        if c in df.columns:
            df[c] = pd.to_numeric(df[c], errors="coerce")
    df = df.dropna(subset=["Close"]).reset_index()
    return df

def sma(s, w): return s.rolling(window=w, min_periods=w).mean()
def rsi(s, w=14):
    delta = s.diff()
    up = delta.clip(lower=0)
    down = -delta.clip(upper=0)
    ma_up = up.rolling(w).mean()
    ma_down = down.rolling(w).mean()
    rs = ma_up / ma_down.replace(0, np.nan)
    return 100 - (100 / (1 + rs))

def add_indicators(df):
    if df.empty: return df
    df = df.copy()
    df["SMA20"]=sma(df["Close"],20)
    df["RSI14"]=rsi(df["Close"])
    return df

def plot_price(df, t):
    fig = go.Figure()
    fig.add_trace(go.Candlestick(x=df["Date"], open=df["Open"], high=df["High"], low=df["Low"], close=df["Close"], name="Pre√ßo"))
    fig.add_trace(go.Scatter(x=df["Date"], y=df["SMA20"], name="SMA20"))
    fig.update_layout(title=f"{t} - Pre√ßo e SMA20", xaxis_title="Data", yaxis_title="Pre√ßo (R$)")
    st.plotly_chart(fig, use_container_width=True)

def plot_rsi(df, t):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df["Date"], y=df["RSI14"], name="RSI(14)"))
    fig.add_hline(y=70, line_dash="dash")
    fig.add_hline(y=30, line_dash="dash")
    fig.update_layout(title=f"{t} - RSI(14)", xaxis_title="Data", yaxis_title="RSI")
    st.plotly_chart(fig, use_container_width=True)

b3 = load_b3_tickers()
st.sidebar.header("‚öôÔ∏è Configura√ß√µes")
q = st.sidebar.text_input("Buscar empresa ou ticker", "")
res = search_b3(q) if q else b3
ticker = st.sidebar.selectbox("Selecione o ticker", res["ticker"])
start = st.sidebar.date_input("In√≠cio", date.today()-timedelta(days=365))
end = st.sidebar.date_input("Fim", date.today())

st.title("üìä An√°lise Did√°tica de A√ß√µes da B3")
st.caption("Somente tickers da B3 (.SA) ‚Äî dados do Yahoo Finance")

if not is_known_b3_ticker(ticker):
    st.error("Ticker fora da lista da B3.")
    st.stop()

with st.spinner("Baixando dados..."):
    df = fetch_data(ticker, start, end)
if df.empty:
    st.warning("Sem dados dispon√≠veis.")
    st.stop()

df = add_indicators(df)
price = float(df["Close"].iloc[-1])
sma20 = float(df["SMA20"].iloc[-1])
rsi_val = float(df["RSI14"].iloc[-1])
delta20 = (price/sma20-1)*100 if sma20 else np.nan

# KPI header
c1,c2,c3 = st.columns(3)
c1.metric("Ticker", ticker)
c2.metric("Fechamento", f"R$ {price:,.2f}".replace(",", "X").replace(".", ",").replace("X","."))
c3.metric("Œî vs SMA20", f"{delta20:+.2f}%" if not np.isnan(delta20) else "‚Äî")

# Conditional tone blocks
if not np.isnan(delta20):
    if delta20 < -5:
        st.error("Pre√ßo bem abaixo da m√©dia (SMA20). Curto prazo pressionado.")
    elif -5 <= delta20 <= 5:
        st.warning("Pre√ßo perto da m√©dia (SMA20). Curto prazo em equil√≠brio.")
    else:
        st.success("Pre√ßo acima da m√©dia (SMA20). Curto prazo com for√ßa.")

if rsi_val < 30:
    st.success("RSI em sobrevenda (‚â§30). Queda forte recente; pode reagir.")
elif 30 <= rsi_val <= 70:
    st.info("RSI em zona neutra (30‚Äì70). Mercado equilibrado.")
else:
    st.warning("RSI em sobrecompra (‚â•70). Subida forte recente; pode corrigir.")

plot_price(df, ticker)
plot_rsi(df, ticker)

st.info("Dica: voc√™ pode colar PETR4, VALE3, ITUB4, etc. Se digitar sem .SA, a aplica√ß√£o adiciona automaticamente.")

# --- Friendly, conversational explanation ---
st.markdown("---")
st.subheader("üí° O que o gr√°fico est√° tentando te contar")

# 1) SMA20 ‚Äì a linha da m√©dia
st.markdown("### ü™ú 1. Entendendo a SMA20 ‚Äî ‚Äúa linha da m√©dia‚Äù")
st.markdown(
    "A **SMA20** √© como a m√©dia dos **√∫ltimos 20 pre√ßos de fechamento** ‚Äî a linha de equil√≠brio que mostra a **dire√ß√£o geral do pre√ßo**."
)
st.markdown("""
- üìà Se o pre√ßo est√° **acima** da linha, h√° **for√ßa** (tend√™ncia de alta).
- üìâ Se est√° **abaixo**, h√° **fraqueza** (tend√™ncia de queda).
""")
st.markdown(f"üëâ No caso de **{ticker}**, o pre√ßo atual √© **R$ {price:,.2f}**, cerca de **{delta20:+.2f}%** em rela√ß√£o √† m√©dia dos √∫ltimos 20 dias.")
if delta20 < -5:
    st.markdown("üî¥ **A a√ß√£o vem caindo h√° v√°rias semanas e o mercado est√° mais pessimista no curto prazo.**")
elif -5 <= delta20 <= 5:
    st.markdown("üü° **O pre√ßo est√° pr√≥ximo da m√©dia ‚Äî o mercado est√° em equil√≠brio.**")
else:
    st.markdown("üü¢ **O pre√ßo est√° acima da m√©dia ‚Äî o papel mostra for√ßa no curto prazo.**")

st.markdown("üìâ √â como se o pre√ßo pudesse ficar **‚Äúafastado da linha‚Äù** por um tempo; quando isso acontece, pode haver **exagero** ‚Äî como uma corda muito esticada.")

# 2) RSI ‚Äì o term√¥metro da for√ßa
st.markdown("---")
st.markdown("### ‚öñÔ∏è 2. Entendendo o RSI(14) ‚Äî ‚Äúo term√¥metro da for√ßa‚Äù")
st.markdown("Pense no **RSI** como um **term√¥metro de energia do mercado**. Vai de **0 a 100** e mostra quem est√° dominando: **compradores** ou **vendedores**.")
st.table(pd.DataFrame({
    "Faixa":[ "70 a 100", "50", "0 a 30" ],
    "Situa√ß√£o":[ "Sobrecompra", "Neutro", "Sobrevenda" ],
    "O que significa":[
        "Subiu r√°pido demais ‚Äî pode corrigir pra baixo.",
        "Equil√≠brio entre compra e venda.",
        "Caiu r√°pido demais ‚Äî pode reagir pra cima."
    ]
}))
st.markdown(f"No caso de **{ticker}**, o RSI(14) est√° em **{rsi_val:.1f}**.")
if rsi_val < 30:
    st.markdown("üü¢ **Est√° na zona de sobrevenda ‚Äî o papel caiu muito e pode reagir em breve.**")
elif 30 <= rsi_val <= 70:
    st.markdown("üü° **Est√° em zona neutra ‚Äî o mercado est√° equilibrado.**")
else:
    st.markdown("üî¥ **Est√° na zona de sobrecompra ‚Äî o pre√ßo subiu demais e pode corrigir.**")

# 3) Juntando tudo
st.markdown("---")
st.markdown("### üß© 3. Juntando as duas informa√ß√µes")
st.markdown("""Quando o **pre√ßo est√° bem abaixo da SMA20** e o **RSI est√° perto de 30**, √© como se o mercado dissesse:

üó£Ô∏è ‚ÄúEssa a√ß√£o caiu bastante, est√° cansada de cair e pode dar um respiro em breve.‚Äù

Mas lembre: isso **n√£o garante** que vai subir agora. √â s√≥ um **sinal de que a press√£o de venda est√° diminuindo**.
""")

# 4) Comportamento de mercado
st.markdown("---")
st.markdown("### üîç 4. Pensando em comportamento de mercado")
st.code("""Pre√ßo ‚Üì‚Üì‚Üì‚Üì‚Üì
SMA20 ‚Üí uma linha que ficou l√° em cima
RSI ‚Üì at√© 30""")
st.markdown("""Isso mostra que:
- A **queda foi r√°pida**;
- O **pre√ßo ficou longe da m√©dia**;
- E o **RSI sinaliza vendedores perdendo for√ßa**.

üí° √â o que muitos chamam de **‚Äúponto de aten√ß√£o‚Äù**: se aparecer **volume de compra** nos pr√≥ximos dias e o pre√ßo come√ßar a subir, ‚Üí pode ser um **repique** (subida tempor√°ria ap√≥s muita queda).
""")

# 5) Resumo final
st.markdown("---")
st.markdown("### üí¨ Em resumo:")
summary = pd.DataFrame({
    "Indicador":[ "SMA20", "RSI(14)", "Conclus√£o geral" ],
    "O que est√° mostrando":[
        "Pre√ßo comparado √† m√©dia de 20 dias",
        "Energia do mercado (0‚Äì100)",
        "Combina√ß√£o de m√©dia e for√ßa (pre√ßo + RSI)"
    ],
    "Significado pr√°tico":[
        ("O pre√ßo est√° bem abaixo da m√©dia ‚Äî a√ß√£o pressionada." if delta20 < -5 else
         "Pre√ßo perto da m√©dia ‚Äî mercado em equil√≠brio." if -5 <= delta20 <= 5 else
         "Pre√ßo acima da m√©dia ‚Äî curto prazo com for√ßa."),
        ("Quase no limite da queda ‚Äî pode surgir oportunidade." if rsi_val < 35 else
         "Equil√≠brio; sem sinal claro." if 35 <= rsi_val <= 65 else
         "Pode haver realiza√ß√£o/corre√ß√£o."),
        ("Fraca, mas pode estar perto de uma pausa/leve recupera√ß√£o." if (delta20 < -5 and rsi_val <= 35) else
         "Neutra; acompanhar pr√≥ximos movimentos." if (-5 <= delta20 <= 5 and 30 <= rsi_val <= 70) else
         "Com for√ßa; aten√ß√£o a exageros se RSI muito alto.")
    ]
})
st.table(summary)
